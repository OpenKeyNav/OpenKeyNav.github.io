"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[5263],{8534:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var t=o(4848),i=o(8453);const r={},s="Overview of Constructor",c={id:"api_reference/constructor_options/constructor_overview",title:"Overview of Constructor",description:"The OpenKeyNav constructor initializes the library and configures its behavior according to the provided options. This allows you to customize how OpenKeyNav interacts with your web page.",source:"@site/docs/5_api_reference/constructor_options/constructor_overview.md",sourceDirName:"5_api_reference/constructor_options",slug:"/api_reference/constructor_options/constructor_overview",permalink:"/docs/api_reference/constructor_options/constructor_overview",draft:!1,unlisted:!1,editUrl:"https://github.com/LDubya/OpenKeyNav/tree/main/packages/create-docusaurus/templates/shared/docs/5_api_reference/constructor_options/constructor_overview.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Scroll Mode",permalink:"/docs/usage/scroll_mode"},next:{title:"debug",permalink:"/docs/api_reference/constructor_options/debug"}},a={},l=[{value:"Constructor",id:"constructor",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Configuration Options",id:"configuration-options",level:3},{value:"Example",id:"example",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"overview-of-constructor",children:"Overview of Constructor"}),"\n",(0,t.jsx)(n.p,{children:"The OpenKeyNav constructor initializes the library and configures its behavior according to the provided options. This allows you to customize how OpenKeyNav interacts with your web page."}),"\n",(0,t.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const openKeyNav = new OpenKeyNav();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"config"})," (optional): An object containing configuration options to customize OpenKeyNav's behavior. If no configuration is provided, default settings will be used."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"config"})," object can include the following properties:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"keys"}),": Custom key bindings for different modes."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"spot"}),": Customization options for the appearance of labels."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"focus"}),": Customization options for the appearance of the focus outline."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"modesConfig"}),": Configuration for different modes like drag-and-drop."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"debug"}),": Debugging options to help identify non-compliant elements."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:"Here's an example of how to initialize OpenKeyNav with a custom configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const openKeyNav = new OpenKeyNav();\n\nconst config = {\n    keys: {\n        click: 'c',  // Custom key for click mode\n        scroll: 'w', // Custom key for scroll mode\n    },\n    spot: {\n        fontColor: 'white',\n        backgroundColor: '#000',\n        insetColor: '#ff0000',\n        fontSize: '14px',\n        arrowSize_px: 6\n    },\n    ,\n    focus: {\n        outlineColor: '#0088cc',  // Customize the outline color\n        outlineStyle: 'dashed'    // Customize the outline style\n    },\n    modesConfig: {\n        move: {\n            config: [\n                {\n                    fromContainer: \".containerOfMoveables\",\n                    toElements: \".dropZoneTargetType1, .dropZoneTargetType2\",\n                    callback: (elMoveable, elDropZoneTarget) => {\n                        // Your callback logic\n                    }\n                }\n            ]\n        }\n    },\n    debug: {\n        keyboardAccessible: false // Disable debug mode\n    }\n};\n\nopenKeyNav.init(config);\n"})}),"\n",(0,t.jsx)(n.p,{children:"In this example, OpenKeyNav is initialized with a custom configuration that changes the key bindings for click and scroll modes, customizes the appearance of labels, configures drag-and-drop behavior, and disables the default debug mode."}),"\n",(0,t.jsx)(n.p,{children:"By using the constructor options, you can tailor OpenKeyNav to fit the specific needs and preferences of your website, enhancing the overall accessibility and user experience."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>c});var t=o(6540);const i={},r=t.createContext(i);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);