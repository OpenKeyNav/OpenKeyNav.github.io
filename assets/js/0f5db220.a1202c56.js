"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[7156],{3661:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var t=o(4848),s=o(8453);const i={},r="debug",c={id:"api_reference/constructor_options/debug",title:"debug",description:"The debug configuration option allows you to enable or disable debug mode, which helps identify elements on your web page that are not keyboard accessible. This can be useful during development to ensure that your website meets accessibility standards.",source:"@site/docs/5_api_reference/constructor_options/debug.md",sourceDirName:"5_api_reference/constructor_options",slug:"/api_reference/constructor_options/debug",permalink:"/docs/api_reference/constructor_options/debug",draft:!1,unlisted:!1,editUrl:"https://github.com/LDubya/OpenKeyNav/tree/main/packages/create-docusaurus/templates/shared/docs/5_api_reference/constructor_options/debug.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Overview of Constructor",permalink:"/docs/api_reference/constructor_options/constructor_overview"},next:{title:"focus",permalink:"/docs/api_reference/constructor_options/focus"}},d={},a=[{value:"Configuration Option",id:"configuration-option",level:2},{value:"<code>debug</code>",id:"debug-1",level:3},{value:"Properties",id:"properties",level:4},{value:"Example",id:"example",level:3},{value:"Summary",id:"summary",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"debug",children:(0,t.jsx)(n.code,{children:"debug"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"debug"})," configuration option allows you to enable or disable debug mode, which helps identify elements on your web page that are not keyboard accessible. This can be useful during development to ensure that your website meets accessibility standards."]}),"\n",(0,t.jsx)(n.h2,{id:"configuration-option",children:"Configuration Option"}),"\n",(0,t.jsx)(n.h3,{id:"debug-1",children:(0,t.jsx)(n.code,{children:"debug"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," ",(0,t.jsx)(n.code,{children:"Object"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Description:"})," An object to configure debug mode settings."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"properties",children:"Properties"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"keyboardAccessible"})," (boolean): When set to ",(0,t.jsx)(n.code,{children:"true"}),", debug mode is enabled, and elements will be labeled to indicate whether they are keyboard accessible. Debug mode is enabled by default to help distinguish the clickable elements that are not keyboard-focusable (red by default) from those that are (black by default)."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:"Here's an example of how to disable debug mode in OpenKeyNav"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const openKeyNav = new OpenKeyNav();\n\nconst config = {\n    debug: {\n        keyboardAccessible: false // Disable debug mode for production\n    }\n};\n\nopenKeyNav.init(config);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, debug mode is disabled by setting ",(0,t.jsx)(n.code,{children:"keyboardAccessible"})," to ",(0,t.jsx)(n.code,{children:"false"}),". Developers should set it to ",(0,t.jsx)(n.code,{children:"false"})," when they have finished debugging and are ready to go into production."]}),"\n",(0,t.jsx)(n.h3,{id:"summary",children:"Summary"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Default Behavior:"})," Debug mode is on by default."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose:"})," Helps distinguish the clickable elements that are not keyboard-focusable (red by default) from those that are (black by default)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Production:"})," Set ",(0,t.jsx)(n.code,{children:"debug.keyboardAccessible"})," to ",(0,t.jsx)(n.code,{children:"false"})," when ready for production."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["By using the ",(0,t.jsx)(n.code,{children:"debug"})," configuration option, you can quickly identify accessibility issues on your web page and make the necessary adjustments to ensure a better user experience for all users."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>c});var t=o(6540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);