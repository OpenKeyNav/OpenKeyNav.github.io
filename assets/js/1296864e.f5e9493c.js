"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[4168],{1140:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>l});var s=i(4848),o=i(8453);const c={},t="keys",r={id:"api_reference/constructor_options/keys",title:"keys",description:"The keys configuration option allows you to customize the keyboard shortcuts used to activate different modes in OpenKeyNav. By default, specific keys are assigned to various functions, but you can change these bindings to suit your needs.",source:"@site/docs/5_api_reference/constructor_options/keys.md",sourceDirName:"5_api_reference/constructor_options",slug:"/api_reference/constructor_options/keys",permalink:"/docs/api_reference/constructor_options/keys",draft:!1,unlisted:!1,editUrl:"https://github.com/LDubya/OpenKeyNav/tree/main/packages/create-docusaurus/templates/shared/docs/5_api_reference/constructor_options/keys.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"focus",permalink:"/docs/api_reference/constructor_options/focus"},next:{title:"modesConfig",permalink:"/docs/api_reference/constructor_options/modesConfig"}},d={},l=[{value:"Configuration Option",id:"configuration-option",level:2},{value:"<code>keys</code>",id:"keys-1",level:3},{value:"Default Key Bindings",id:"default-key-bindings",level:4},{value:"Customizing Key Bindings",id:"customizing-key-bindings",level:3},{value:"Example",id:"example",level:3},{value:"Summary",id:"summary",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"keys",children:(0,s.jsx)(n.code,{children:"keys"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"keys"})," configuration option allows you to customize the keyboard shortcuts used to activate different modes in OpenKeyNav. By default, specific keys are assigned to various functions, but you can change these bindings to suit your needs."]}),"\n",(0,s.jsx)(n.h2,{id:"configuration-option",children:"Configuration Option"}),"\n",(0,s.jsx)(n.h3,{id:"keys-1",children:(0,s.jsx)(n.code,{children:"keys"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type:"})," ",(0,s.jsx)(n.code,{children:"Object"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description:"})," An object to configure key bindings for different modes."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"default-key-bindings",children:"Default Key Bindings"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"escape"}),": ",(0,s.jsx)(n.code,{children:"'q'"})," - Alternative escape key for when the escape key is not easily accessible."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"click"}),": ",(0,s.jsx)(n.code,{children:"'k'"})," - Enter click mode to click on clickable elements, such as links."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"scroll"}),": ",(0,s.jsx)(n.code,{children:"'s'"})," - Focus on the next scrollable region."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"move"}),": ",(0,s.jsx)(n.code,{children:"'m'"})," - Enter move mode for keyboard drag-and-drop interactions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"heading"}),": ",(0,s.jsx)(n.code,{children:"'h'"})," - Focus on the next heading."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"customizing-key-bindings",children:"Customizing Key Bindings"}),"\n",(0,s.jsx)(n.p,{children:"You can override the default key bindings by specifying a new key configuration."}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"Here's an example of how to customize the key bindings in OpenKeyNav:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const openKeyNav = new OpenKeyNav();\n\nconst config = {\n    keys: {\n        escape: 'e',   // Custom escape key\n        click: 'c',    // Custom click mode key\n        scroll: 'w',   // Custom scroll mode key\n        move: 'd',     // Custom move mode key\n        heading: 'n'   // Custom heading navigation key\n    }\n};\n\nopenKeyNav.init(config);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, the default key bindings are overridden with custom keys. The escape key is changed to ",(0,s.jsx)(n.code,{children:"e"}),", click mode to ",(0,s.jsx)(n.code,{children:"c"}),", scroll mode to ",(0,s.jsx)(n.code,{children:"w"}),", move mode to ",(0,s.jsx)(n.code,{children:"d"}),", and heading navigation to ",(0,s.jsx)(n.code,{children:"n"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"summary",children:"Summary"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default Key Bindings:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"escape"}),": ",(0,s.jsx)(n.code,{children:"'q'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"click"}),": ",(0,s.jsx)(n.code,{children:"'k'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"scroll"}),": ",(0,s.jsx)(n.code,{children:"'s'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"move"}),": ",(0,s.jsx)(n.code,{children:"'m'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"heading"}),": ",(0,s.jsx)(n.code,{children:"'h'"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Customizing Keys:"})," You can override the default keys by providing a custom configuration in the ",(0,s.jsx)(n.code,{children:"keys"})," object."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["By using the ",(0,s.jsx)(n.code,{children:"keys"})," configuration option, you can tailor OpenKeyNav's keyboard shortcuts to better fit your preferences and enhance the user experience on your website."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>r});var s=i(6540);const o={},c=s.createContext(o);function t(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);