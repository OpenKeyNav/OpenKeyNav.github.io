"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[3811],{6240:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var i=o(4848),r=o(8453);const s={},t="modesConfig",c={id:"api_reference/constructor_options/modesConfig",title:"modesConfig",description:"The modesConfig configuration option allows you to customize specific modes in OpenKeyNav&trade;, such as the drag-and-drop functionality. This option provides flexibility in defining how different interactive modes are set up and managed.",source:"@site/docs/5_api_reference/constructor_options/modesConfig.md",sourceDirName:"5_api_reference/constructor_options",slug:"/api_reference/constructor_options/modesConfig",permalink:"/docs/api_reference/constructor_options/modesConfig",draft:!1,unlisted:!1,editUrl:"https://github.com/LDubya/OpenKeyNav/tree/main/packages/create-docusaurus/templates/shared/docs/5_api_reference/constructor_options/modesConfig.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"keys",permalink:"/docs/api_reference/constructor_options/keys"},next:{title:"spot",permalink:"/docs/api_reference/constructor_options/spot"}},l={},d=[{value:"Configuration Option",id:"configuration-option",level:2},{value:"<code>modesConfig</code>",id:"modesconfig-1",level:3},{value:"Properties",id:"properties",level:4},{value:"<code>move</code> Configuration",id:"move-configuration",level:3},{value:"Properties",id:"properties-1",level:4},{value:"<code>config</code> Array Objects",id:"config-array-objects",level:3},{value:"Example",id:"example",level:3},{value:"Summary",id:"summary",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"modesconfig",children:(0,i.jsx)(n.code,{children:"modesConfig"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"modesConfig"})," configuration option allows you to customize specific modes in OpenKeyNav\u2122, such as the drag-and-drop functionality. This option provides flexibility in defining how different interactive modes are set up and managed."]}),"\n",(0,i.jsx)(n.h2,{id:"configuration-option",children:"Configuration Option"}),"\n",(0,i.jsx)(n.h3,{id:"modesconfig-1",children:(0,i.jsx)(n.code,{children:"modesConfig"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," ",(0,i.jsx)(n.code,{children:"Object"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," An object to configure different modes in OpenKeyNav."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"move"})," (optional): Configuration for drag-and-drop mode."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"move-configuration",children:[(0,i.jsx)(n.code,{children:"move"})," Configuration"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"move"})," configuration object allows you to define how drag-and-drop interactions should work. It includes options for specifying containers, elements, and callback functions."]}),"\n",(0,i.jsx)(n.h4,{id:"properties-1",children:"Properties"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"config"})," (optional): An array of objects defining drag-and-drop configurations."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"config-array-objects",children:[(0,i.jsx)(n.code,{children:"config"})," Array Objects"]}),"\n",(0,i.jsxs)(n.p,{children:["Each object in the ",(0,i.jsx)(n.code,{children:"config"})," array can include the following properties:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fromContainer"})," (string, optional): Selector for the container that holds the draggable elements."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fromElements"})," (string, optional): Selector for the specific draggable elements within the ",(0,i.jsx)(n.code,{children:"fromContainer"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"resolveFromElements"})," (function, optional): Callback function to dynamically resolve the draggable elements."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fromExclude"})," (string, optional): Selector for elements within ",(0,i.jsx)(n.code,{children:"fromContainer"})," to exclude from being draggable."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"toElements"})," (string, required): Selector for the drop zone targets."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"resolveToElements"})," ",(0,i.jsx)("span",{style:{backgroundColor:"#f9f2f4",color:"#c7254e",padding:"0.2em 0.4em",borderRadius:"0.2em"},children:"v.next"})," (function, optional): Callback function to dynamically resolve the drop zone targets."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"callback"})," (function, optional): Callback function that is called when a draggable element is moved to a drop zone."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"Here's an example of how to configure the drag-and-drop mode in OpenKeyNav:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const openKeyNav = new OpenKeyNav();\n\nconst moveConfig = [\n  {\n    fromContainer: ".classContainerFrom1",\n    fromElements: ".classElementFrom1",\n    resolveFromElements: function() { // Optional callback to resolve fromElements\n        return document.querySelectorAll(\'.classElementFrom1\'); \n    },\n    fromExclude: ".excludeThisElement",\n    toElements: ".classToA, .classToD, .classToE", \n    callback: (el, target) => {\n      console.log(\'Moved\', el, \'to\', target);\n    }\n  },\n  {\n    fromContainer: ".classContainerFrom2",\n    toElements: ".classToB"\n  },\n  {\n    resolveFromElements: function() { \n        return document.querySelectorAll(\'.classElementFrom3\'); \n    },\n    toElements: ".classToC"\n  }\n];\n\nconst config = {\n    modesConfig: {\n        move: {\n            config: moveConfig\n        }\n    }\n};\n\nopenKeyNav.init(config);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, the ",(0,i.jsx)(n.code,{children:"modesConfig"})," object is used to configure the drag-and-drop functionality with various settings for containers, elements, and callbacks."]}),"\n",(0,i.jsx)(n.h3,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"modesConfig"})," Object:"]})," Configure different modes in OpenKeyNav."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"move"})," Property:"]})," Customize drag-and-drop interactions with options for containers, elements, and callbacks."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Flexibility:"})," Tailor the behavior of interactive modes to suit the specific needs of your website."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["By using the ",(0,i.jsx)(n.code,{children:"modesConfig"})," configuration option, you can enhance the interactive capabilities of OpenKeyNav and provide a better user experience on your website."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>c});var i=o(6540);const r={},s=i.createContext(r);function t(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);